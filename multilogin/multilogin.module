<?php
// $Id: multilogin.module

/**
 * @file
 * Enables the user registration via external systems
 */

/**
 * Implementation of hook_menu().
 */
function multilogin_menu() {
  $items['admin/settings/multilogin'] = array(
    'title' => 'Multilogin',
    'description' => t('Multilogin settings'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('multilogin_settings_form'),
    'file' => 'multilogin.admin.inc',
    'access arguments' => array('administer multilogin'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['multilogin/authenticate/%'] = array(
    'page callback' => 'multilogin_authentication_page',
    'page arguments' => array(2),
  //  'access callback' => 'user_is_anonymous',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['user/%user/multilogin'] = array(
    'title' => 'multilogin identities',
    'page callback' => 'multilogin_user_identities',
    'page arguments' => array(1),
    'access callback' => 'user_edit_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
  );

  $items['user/%user/multilogin/delete'] = array(
    'title' => 'Delete Identity',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('multilogin_identity_delete_form', 1),
    'access callback' => 'user_edit_access',
    'access arguments' => array(1),
    'type' => MENU_CALLBACK,
    //'file' => 'openid.pages.inc',
  );
  return $items;
}


/**
 * Internal init function TODO:rename not to be confused with hook
 */
function _multilogin_init() {
  global $multilogin;

  if (!$multilogin) {
    $multilogin_config = variable_get('multilogin', array());
    foreach ($multilogin_config as $app_name => $config) {
    	if ($config['enabled'] === 1) {
	        include "providers/$app_name/$app_name.inc";
	        $function = "multilogin_{$app_name}_init";
	        if (function_exists($function)) {
	          call_user_func($function);
	        }
      }
    }
  }
}

/**
 * Implementation of hook_perm().
 */
function multilogin_perm() {
  return array('administer multilogin');
}

/**
 * Process variables for page.tpl.php.
 */
function multilogin_preprocess_page(&$variables) {
  global $multilogin;
  if (count($multilogin)) {

    foreach ($multilogin as $app_name => $app) {
      $function = "multilogin_{$app_name}_preprocess_page";
      if (function_exists($function)) {
        call_user_func($function, &$variables);
      }
    }
  }
}

/**
 * Implementation of hook_form_alter().
 */
function multilogin_form_alter(&$form, &$form_state, $form_id) {
  global $multilogin;

  switch ($form_id) {
    case 'user_login_block':
    case 'user_login':
    case 'user_register':
      _multilogin_init();
      if (count($multilogin)) {
        foreach ($multilogin as $app_name => $app) {
          $function = "multilogin_{$app_name}_login_form_alter";
          if (function_exists($function)) {
            call_user_func($function, &$form, &$form_state, $form_id);
          }
        }
      }
      break;
    case 'user_profile_form':
      $acc = user_load($form['#uid']);
      if (count($acc->multilogin) > 0) {
        $form['account']['mail']['#required'] = false;
      }
      // TODO: add user picture selection
      // TODO: remove nomail rid if user entered correct email
      break;
  }
}

/**
 * Styling
 */
function _multilogin_add_css($app_name) {
  drupal_add_css(drupal_get_path('module', 'multilogin') . "/providers/$app_name/$app_name.css");
}

/**
 * Authentication page callback.
 */
function multilogin_authentication_page($app_name) {
  _multilogin_init();
  //dsm($app_name);
  $function = "multilogin_{$app_name}_authentication_page";
  if (function_exists($function)) {
    call_user_func($function);
  }
}

/**
 * Implementation of hook_user().
 */
function multilogin_user($op, &$edit, &$account, $category = NULL) {
  global $multilogin;

  if ($op == 'logout') {
    _multilogin_init();
  }

  if (count($multilogin)) {
    foreach ($multilogin as $app_name => $app) {
      $function = "multilogin_{$app_name}_user";
			//  watchdog('multilogin', $function, array('%user' => $account->uid),  WATCHDOG_NOTICE , l(t('view'), 'user/'. $account->uid .''));

      if (function_exists($function)) {
        call_user_func($function, $op, &$edit, &$account, $category);
      }
    }
  }
}

/**
 *  Helper function to display username from external services
 */
function multilogin_show_name($authname, $app_name, $account ) {
  $function = "multilogin_{$app_name}_show_name";
  if (function_exists($function)) {
    return call_user_func($function, $account, $authname);
  }
}

/**
 *  Helper function to get user picture from external services
 */
function multilogin_get_userpic($account ){
  global $multilogin;
  $pics = array();

  if (count($multilogin)) {
    foreach ($multilogin as $app_name => $app) {
       $function = "multilogin_{$app_name}_get_userpic";
      if (function_exists($function)) {
       $pics[$app_name] = call_user_func($function, $account);
      }
    }
  }
  return $pics;
}


/**
 * List of user identities and identities management
 */
function multilogin_user_identities($account) {
  global $multilogin;
  _multilogin_init();
  drupal_set_title(check_plain($account->name));

  $rows = array();
  $apps = array();

  $form_state = array();
  $form = drupal_retrieve_form('multilogin_user_add', $form_state,    $account  );

  if (count($multilogin)) {
    foreach ($multilogin as $app_name => $app) {
      $apps[] = $app_name;
      $function = "multilogin_{$app_name}_login_form_alter";
      if (function_exists($function)) {
        call_user_func($function, &$form, &$form_state, $form_id);
      }
    }
  }
  drupal_prepare_form('multilogin_user_add', $form, $form_state);

  $result = db_query("SELECT * FROM {authmap} WHERE module in('" . implode("', '", $apps) . "') AND uid=%d", $account->uid);
  $identities = array();
  while ($identity = db_fetch_object($result)) {
    $identities[$identity->aid] = $identity;
  }

  // allow to delete identities if there are classic registration  or >0 another identies
  $candelete = 0;
  if ((count($identities) > 1) or valid_email_address($account->init)) {
    $candelete = 1;
  }

  $id_rows = array();
  foreach ($identities as $identity) {
    $candeletethis = $candelete;
    if ($account->init == $identity->module) {
      $candeletethis = 0;
    }
    $id_rows[] = array(
    "module" => $identity->module,
    "name" => multilogin_show_name($identity->authname, $identity->module, $account ),
    "delete" => $candeletethis ? l(t('Delete'), 'user/' . $account->uid . '/multilogin/delete/' . $identity->aid . '/' . $identity->module) : t('To delete this identity you should add another auth info'));
  }

  $output = theme('multilogin_identities_table', $id_rows);
  $output .= drupal_render_form('multilogin_user_add', $form);

  return $output;
}

/**
 * Form to add identities to user account. altered by plugins
 */
function multilogin_user_add($form_state, $account) {
  $form['uid'] = array(
	'#type' => 'value',
	'#value' => $account->uid,
	);
  return $form;
}

/**
 * Confirmation form to delete the specified identity from the system.
 *
 * @ingroup forms
 * @see multilogin_identity_delete_form_submit()
 TODO: move to .inc file
 */
function multilogin_identity_delete_form($form_state, $account, $aid = 0, $app_name = null) {

  global $multilogin;
  _multilogin_init();

  $authname = db_result(db_query('SELECT authname FROM {authmap} WHERE uid = %d AND aid = %d', $account->uid, $aid));
//  dsm($authname);
  $form = array();

  $form['uid'] = array(
    '#type' => 'value',
    '#value' => $account->uid,
  );

  $form['aid'] = array(
    '#type' => 'value',
    '#value' => $aid,
  );

  $form['app_name'] = array(
    '#type' => 'value',
    '#value' => $app_name,
  );

  return confirm_form($form, t('Are you sure you want to delete the %authname identity for %user?', array('%authname' =>  multilogin_show_name($authname, $app_name, $account ), '%user' => $account->name)), 'user/' . $account->uid . '/openid');
}


function multilogin_identity_delete_form_submit($form, &$form_state) {
  $app_name = $form_state['values']['app_name'];
  $account = user_load(array('uid' => $form_state['values']['uid'] ));

  // logout user from app
  $function = "multilogin_{$app_name}_user";
  if (function_exists($function)) {
    _multilogin_init();
    call_user_func($function, 'logout', array(), $account, null);
  }

  db_query("DELETE FROM {authmap} WHERE uid = %d AND aid = %d ", $form_state['values']['uid'], $form_state['values']['aid']);

  unset( $account->multilogin[$app_name]);
  $acc = user_save($account, array('multilogin' => $account->multilogin));
//    dsm($acc);
  // todo: add plugin func call?
  if (db_affected_rows()) {
    drupal_set_message(t('identity deleted.'));
  }

  $form_state['redirect'] = 'user/' . $form_state['values']['uid'] . '/multilogin';
}


/**
 * Invokes hook_multilogin_***() in every module.*
 * We cannot use module_invoke() for this, because the arguments need to
 * be passed by reference.

 * @param $plugin
 *    plugin name  (==  external system name)
 * @param $func
 *   called function name
 * @param $array
 *    array to construct user object
 * @param $ext_profile
 *    profile info in external system
 */
function multilogin_module_invoke($plugin, $func, &$array , &$ext_profile ) {
  foreach (module_list() as $module) {
    $function = $module .'_multilogin_'.$func;
    if (function_exists($function)) {
      $function($plugin, $func, &$array , &$ext_profile );
    }
  }
}


 /**
 * helper function to construct free login using numbers. so ugly(
 */
function multilogin_get_free_username($name, $counter = 0, $original_name = '') {
  $name = str_replace('  ', ' ', $name);
	if($original_name == '') {
      $original_name = $name;
  }

  $r = db_fetch_object(db_query("SELECT COUNT(*) AS count FROM {users} WHERE LOWER(name) = LOWER('%s')", $name));
  if(!$r->count) {
    return $name;
  } else {
    $counter++;
    return multilogin_get_free_username($name . '_' . $counter, $counter, $name);
  }
}

/**
 * helper function to set user additional role if user has no email
 */
function multilogin_set_noemail_rid(&$account) {
  $rid = variable_get('multilogin_noemail_rid', '');
  if($rid) {
     $account->roles[$rid] =  'multilogin_noemail_rid'; // not correct role name, but faster
  }
}


/**
 * Theming functions
 */
function multilogin_theme() {
  return array(
    'multilogin_identities_table' => array(
      'arguments' => array('rows' => NULL),
    ),
  );

}

function theme_multilogin_identities_table($rows) {
    $header = array(t('ID'), t('Operations'));
	if(sizeof($rows))
	{
		/*$output.='<table class="user-accounts">';
		foreach($rows as $row)
		{
			$output.='<tr>
                <td class="name">
                  <img src="/'.path_to_theme().'/img/ico-'.$row['module'].'.png"> <span class="account-name">'.$row['name'].'</span>
                </td>
                <td class="actions"><span class="del">'.$row['delete'].'</span></td>
              </tr>';
		}
		$output.='</table>';*/
			$output = theme('table', $header, $rows);
	}

	return $output;
}

